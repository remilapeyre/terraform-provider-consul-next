/*
Code generated by github-terraform-generator; DO NOT EDIT.
Any modifications will be overwritten
*/

package datasource

import (
	schema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	types "github.com/hashicorp/terraform-plugin-framework/types"
)

func aclAuthMethodSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"type": schema.StringAttribute{
				Computed: true,
			},
			"display_name": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"max_token_ttl": schema.StringAttribute{
				Computed: true,
			},
			"token_locality": schema.StringAttribute{
				Computed: true,
			},
			"config": schema.StringAttribute{
				Computed: true,
			},
			"namespace_rules": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"selector": schema.StringAttribute{
							Computed: true,
						},
						"bind_namespace": schema.StringAttribute{
							Computed: true,
						},
					}},
			},
			"namespace": schema.StringAttribute{
				Computed: true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func aclBindingRuleSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Required: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"auth_method": schema.StringAttribute{
				Computed: true,
			},
			"selector": schema.StringAttribute{
				Computed: true,
			},
			"bind_type": schema.StringAttribute{
				Computed: true,
			},
			"bind_name": schema.StringAttribute{
				Computed: true,
			},
			"namespace": schema.StringAttribute{
				Computed: true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func aclPolicySchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"name": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"rules": schema.StringAttribute{
				Computed: true,
			},
			"datacenters": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"namespace": schema.StringAttribute{
				Computed: true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func aclRoleSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"name": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"policies": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
					}},
			},
			"service_identities": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"service_name": schema.StringAttribute{
							Computed: true,
						},
						"datacenters": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
					}},
			},
			"node_identities": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"node_name": schema.StringAttribute{
							Computed: true,
						},
						"datacenter": schema.StringAttribute{
							Computed: true,
						},
					}},
			},
			"namespace": schema.StringAttribute{
				Computed: true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func aclTokenSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"accessor_id": schema.StringAttribute{
				Required: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"policies": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
					}},
			},
			"roles": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
					}},
			},
			"service_identities": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"service_name": schema.StringAttribute{
							Computed: true,
						},
						"datacenters": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
					}},
			},
			"node_identities": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"node_name": schema.StringAttribute{
							Computed: true,
						},
						"datacenter": schema.StringAttribute{
							Computed: true,
						},
					}},
			},
			"local": schema.BoolAttribute{
				Computed: true,
			},
			"auth_method": schema.StringAttribute{
				Computed: true,
			},
			"expiration_ttl": schema.StringAttribute{
				Computed: true,
			},
			"expiration_time": schema.StringAttribute{
				Computed: true,
			},
			"create_time": schema.StringAttribute{
				Computed: true,
			},
			"namespace": schema.StringAttribute{
				Computed: true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
			"auth_method_namespace": schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func aclTokenSecretIdSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"accessor_id": schema.StringAttribute{
				Required: true,
			},
			"secret_id": schema.StringAttribute{
				Computed: true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
			"namespace": schema.StringAttribute{
				Computed: true,
			},
			"pgp_key": schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func adminPartitionSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"name": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func agentConfigSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"datacenter": schema.StringAttribute{
				Computed: true,
			},
			"primary_datacenter": schema.StringAttribute{
				Computed: true,
			},
			"node_name": schema.StringAttribute{
				Computed: true,
			},
			"node_id": schema.StringAttribute{
				Computed: true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
			"revision": schema.StringAttribute{
				Computed: true,
			},
			"server": schema.BoolAttribute{
				Computed: true,
			},
			"version": schema.StringAttribute{
				Computed: true,
			},
			"build_date": schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func autopilotHealthSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"healthy": schema.BoolAttribute{
				Computed: true,
			},
			"failure_tolerance": schema.Int64Attribute{
				Computed: true,
			},
			"servers": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"address": schema.StringAttribute{
							Computed: true,
						},
						"serf_status": schema.StringAttribute{
							Computed: true,
						},
						"version": schema.StringAttribute{
							Computed: true,
						},
						"leader": schema.BoolAttribute{
							Computed: true,
						},
						"last_term": schema.Int64Attribute{
							Computed: true,
						},
						"last_index": schema.Int64Attribute{
							Computed: true,
						},
						"healthy": schema.BoolAttribute{
							Computed: true,
						},
						"voter": schema.BoolAttribute{
							Computed: true,
						},
						"stable_since": schema.StringAttribute{
							Computed: true,
						},
					}},
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func catalogServiceSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"node": schema.StringAttribute{
				Computed: true,
			},
			"address": schema.StringAttribute{
				Computed: true,
			},
			"datacenter": schema.StringAttribute{
				Computed: true,
			},
			"tagged_addresses": schema.MapAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"node_meta": schema.MapAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"service_id": schema.StringAttribute{
				Computed: true,
			},
			"service_name": schema.StringAttribute{
				Computed: true,
			},
			"service_address": schema.StringAttribute{
				Computed: true,
			},
			"service_tagged_addresses": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"address": schema.StringAttribute{
							Computed: true,
						},
						"port": schema.Int64Attribute{
							Computed: true,
						},
					},
				},
			},
			"service_tags": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"service_meta": schema.MapAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"service_port": schema.Int64Attribute{
				Computed: true,
			},
			"service_weights": &schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"passing": schema.Int64Attribute{
						Computed: true,
					},
					"warning": schema.Int64Attribute{
						Computed: true,
					},
				},
			},
			"service_enable_tag_override": schema.BoolAttribute{
				Computed: true,
			},
			"service_proxy": &schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"envoy_extensions": &schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Computed: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
								},
								"arguments": schema.StringAttribute{
									Computed: true,
								},
								"consul_version": schema.StringAttribute{
									Computed: true,
								},
								"envoy_version": schema.StringAttribute{
									Computed: true,
								},
							}},
					},
					"destination_service_name": schema.StringAttribute{
						Computed: true,
					},
					"destination_service_id": schema.StringAttribute{
						Computed: true,
					},
					"local_service_address": schema.StringAttribute{
						Computed: true,
					},
					"local_service_port": schema.Int64Attribute{
						Computed: true,
					},
					"local_service_socket_path": schema.StringAttribute{
						Computed: true,
					},
					"mode": schema.StringAttribute{
						Computed: true,
					},
					"transparent_proxy": &schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"outbound_listener_port": schema.Int64Attribute{
								Computed: true,
							},
							"dialed_directly": schema.BoolAttribute{
								Computed: true,
							},
						},
					},
					"config": schema.StringAttribute{
						Computed: true,
					},
					"upstreams": &schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"destination_type": schema.StringAttribute{
									Computed: true,
								},
								"destination_partition": schema.StringAttribute{
									Computed: true,
								},
								"destination_namespace": schema.StringAttribute{
									Computed: true,
								},
								"destination_peer": schema.StringAttribute{
									Computed: true,
								},
								"destination_name": schema.StringAttribute{
									Computed: true,
								},
								"datacenter": schema.StringAttribute{
									Computed: true,
								},
								"local_bind_address": schema.StringAttribute{
									Computed: true,
								},
								"local_bind_port": schema.Int64Attribute{
									Computed: true,
								},
								"local_bind_socket_path": schema.StringAttribute{
									Computed: true,
								},
								"local_bind_socket_mode": schema.StringAttribute{
									Computed: true,
								},
								"config": schema.StringAttribute{
									Computed: true,
								},
								"mesh_gateway": &schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"mode": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"centrally_configured": schema.BoolAttribute{
									Computed: true,
								},
							}},
					},
					"mesh_gateway": &schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"mode": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"expose": &schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"checks": schema.BoolAttribute{
								Computed: true,
							},
							"paths": &schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"listener_port": schema.Int64Attribute{
											Computed: true,
										},
										"path": schema.StringAttribute{
											Computed: true,
										},
										"local_path_port": schema.Int64Attribute{
											Computed: true,
										},
										"protocol": schema.StringAttribute{
											Computed: true,
										},
										"parsed_from_check": schema.BoolAttribute{
											Computed: true,
										},
									}},
							},
						},
					},
					"access_logs": &schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed: true,
							},
							"disable_listener_logs": schema.BoolAttribute{
								Computed: true,
							},
							"type": schema.StringAttribute{
								Computed: true,
							},
							"path": schema.StringAttribute{
								Computed: true,
							},
							"json_format": schema.StringAttribute{
								Computed: true,
							},
							"text_format": schema.StringAttribute{
								Computed: true,
							},
						},
					},
				},
			},
			"service_locality": &schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"region": schema.StringAttribute{
						Computed: true,
					},
					"zone": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"create_index": schema.Int64Attribute{
				Computed: true,
			},
			"checks": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"node": schema.StringAttribute{
							Computed: true,
						},
						"check_id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"notes": schema.StringAttribute{
							Computed: true,
						},
						"output": schema.StringAttribute{
							Computed: true,
						},
						"service_id": schema.StringAttribute{
							Computed: true,
						},
						"service_name": schema.StringAttribute{
							Computed: true,
						},
						"service_tags": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"type": schema.StringAttribute{
							Computed: true,
						},
						"namespace": schema.StringAttribute{
							Computed: true,
						},
						"partition": schema.StringAttribute{
							Computed: true,
						},
						"exposed_port": schema.Int64Attribute{
							Computed: true,
						},
						"peer_name": schema.StringAttribute{
							Computed: true,
						},
						"definition": &schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"http": schema.StringAttribute{
									Computed: true,
								},
								"header": schema.MapAttribute{
									ElementType: types.ListType{
										ElemType: types.StringType,
									},
									Computed: true,
								},
								"method": schema.StringAttribute{
									Computed: true,
								},
								"body": schema.StringAttribute{
									Computed: true,
								},
								"tls_server_name": schema.StringAttribute{
									Computed: true,
								},
								"tls_skip_verify": schema.BoolAttribute{
									Computed: true,
								},
								"tcp": schema.StringAttribute{
									Computed: true,
								},
								"udp": schema.StringAttribute{
									Computed: true,
								},
								"grpc": schema.StringAttribute{
									Computed: true,
								},
								"os_service": schema.StringAttribute{
									Computed: true,
								},
								"grpc_use_tls": schema.BoolAttribute{
									Computed: true,
								},
								"interval_duration": schema.StringAttribute{
									Computed: true,
								},
								"timeout_duration": schema.StringAttribute{
									Computed: true,
								},
								"deregister_critical_service_after_duration": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					}},
			},
			"modify_index": schema.Int64Attribute{
				Computed: true,
			},
			"namespace": schema.StringAttribute{
				Computed: true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func certificateAuthoritySchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"connect_provider": schema.StringAttribute{
				Computed: true,
			},
			"config": schema.StringAttribute{
				Computed: true,
			},
			"state": schema.MapAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"force_without_cross_signing": schema.BoolAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func configEntrySchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"kind": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"namespace": schema.StringAttribute{
				Computed: true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
			"config": schema.StringAttribute{
				Computed: true,
			},
			"meta": schema.MapAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func datacentersSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"datacenters": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func keyPrefixSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"key_prefix": schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func keysSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"keys": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Computed: true,
						},
						"flags": schema.Int64Attribute{
							Computed: true,
						},
						"value": schema.StringAttribute{
							Computed: true,
						},
						"namespace": schema.StringAttribute{
							Computed: true,
						},
						"partition": schema.StringAttribute{
							Computed: true,
						},
					}},
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func namespaceSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"name": schema.StringAttribute{
				Required: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"ac_ls": &schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"policy_defaults": &schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							}},
					},
					"role_defaults": &schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							}},
					},
				},
			},
			"meta": schema.MapAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func networkAreaMembersSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"members": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"port": schema.Int64Attribute{
							Computed: true,
						},
						"datacenter": schema.StringAttribute{
							Computed: true,
						},
						"role": schema.StringAttribute{
							Computed: true,
						},
						"build": schema.StringAttribute{
							Computed: true,
						},
						"protocol": schema.Int64Attribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"rtt": schema.StringAttribute{
							Computed: true,
						},
					}},
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func networkSegmentsSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"segments": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func nodeSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"services": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"id": schema.StringAttribute{
				Required: true,
			},
			"node": schema.StringAttribute{
				Computed: true,
			},
			"address": schema.StringAttribute{
				Computed: true,
			},
			"datacenter": schema.StringAttribute{
				Computed: true,
			},
			"tagged_addresses": schema.MapAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"meta": schema.MapAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
			"peer_name": schema.StringAttribute{
				Computed: true,
			},
			"locality": &schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"region": schema.StringAttribute{
						Computed: true,
					},
					"zone": schema.StringAttribute{
						Computed: true,
					},
				},
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func nodesSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"nodes": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"node": schema.StringAttribute{
							Computed: true,
						},
						"address": schema.StringAttribute{
							Computed: true,
						},
						"datacenter": schema.StringAttribute{
							Computed: true,
						},
						"tagged_addresses": schema.MapAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"meta": schema.MapAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"partition": schema.StringAttribute{
							Computed: true,
						},
						"peer_name": schema.StringAttribute{
							Computed: true,
						},
						"locality": &schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"region": schema.StringAttribute{
									Computed: true,
								},
								"zone": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					}},
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func peeringSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"partition": schema.StringAttribute{
				Computed: true,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"meta": schema.MapAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"state": schema.StringAttribute{
				Computed: true,
			},
			"peer_id": schema.StringAttribute{
				Computed: true,
			},
			"peer_ca_pems": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"peer_server_name": schema.StringAttribute{
				Computed: true,
			},
			"peer_server_addresses": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"stream_status": &schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"imported_services": schema.ListAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"exported_services": schema.ListAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"last_heartbeat": schema.StringAttribute{
						Computed: true,
					},
					"last_receive": schema.StringAttribute{
						Computed: true,
					},
					"last_send": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"remote": &schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"partition": schema.StringAttribute{
						Computed: true,
					},
					"datacenter": schema.StringAttribute{
						Computed: true,
					},
					"locality": &schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"region": schema.StringAttribute{
								Computed: true,
							},
							"zone": schema.StringAttribute{
								Computed: true,
							},
						},
					},
				},
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func peeringsSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"peerings": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"partition": schema.StringAttribute{
							Computed: true,
						},
						"deleted_at": schema.StringAttribute{
							Computed: true,
						},
						"meta": schema.MapAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"state": schema.StringAttribute{
							Computed: true,
						},
						"peer_id": schema.StringAttribute{
							Computed: true,
						},
						"peer_ca_pems": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"peer_server_name": schema.StringAttribute{
							Computed: true,
						},
						"peer_server_addresses": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"stream_status": &schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"imported_services": schema.ListAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
								"exported_services": schema.ListAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
								"last_heartbeat": schema.StringAttribute{
									Computed: true,
								},
								"last_receive": schema.StringAttribute{
									Computed: true,
								},
								"last_send": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"remote": &schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"partition": schema.StringAttribute{
									Computed: true,
								},
								"datacenter": schema.StringAttribute{
									Computed: true,
								},
								"locality": &schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"region": schema.StringAttribute{
											Computed: true,
										},
										"zone": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
					}},
			},
		},
		Blocks: map[string]schema.Block{},
	}
}

func serviceHealthSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
			},
			"services": &schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{}},
			},
		},
		Blocks: map[string]schema.Block{},
	}
}
