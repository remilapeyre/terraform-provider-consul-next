/*
Code generated by github-terraform-generator; DO NOT EDIT.
Any modifications will be overwritten
*/

package provider

import schema "github.com/hashicorp/terraform-plugin-framework/provider/schema"

func configSchema() schema.Schema {
	return schema.Schema{
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{
			"address": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Address is the address of the Consul server",
			},
			"scheme": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Scheme is the URI scheme for the Consul server.",
			},
			"path_prefix": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Prefix for URIs for when consul is behind an API gateway (reverse proxy).  The API gateway must strip off the PathPrefix before passing the request onto consul.",
			},
			"datacenter": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Datacenter to use. If not provided, the default agent datacenter is used.",
			},
			"http_auth": &schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "HttpAuth is the auth info to use for http access.",
				Attributes: map[string]schema.Attribute{
					"username": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "Username to use for HTTP Basic Authentication",
					},
					"password": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "Password to use for HTTP Basic Authentication",
					},
				},
			},
			"token": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Token is used to provide a per-request ACL token",
			},
			"token_file": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "TokenFile is a file containing the current token to use for this client. If provided it is read once at startup and never again.",
			},
			"namespace": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Namespace is the name of the namespace to send along for the request when no other Namespace is present in the QueryOptions",
			},
			"partition": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Partition is the name of the partition to send along for the request when no other Partition is present in the QueryOptions",
			},
			"tls_config": &schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "TLSConfig is used to generate a TLSClientConfig that's useful for talking to Consul using TLS.",
				Attributes: map[string]schema.Attribute{
					"address": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "Address is the optional address of the Consul server. The port, if any will be removed from here and this will be set to the ServerName of the resulting config.",
					},
					"ca_file": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "CAFile is the optional path to the CA certificate used for Consul communication, defaults to the system bundle if not specified.",
					},
					"ca_path": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "CAPath is the optional path to a directory of CA certificates to use for Consul communication, defaults to the system bundle if not specified.",
					},
					"ca_pem": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "CAPem is the optional PEM-encoded CA certificate used for Consul communication, defaults to the system bundle if not specified.",
					},
					"cert_file": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "CertFile is the optional path to the certificate for Consul communication. If this is set then you need to also set KeyFile.",
					},
					"cert_pem": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "CertPEM is the optional PEM-encoded certificate for Consul communication. If this is set then you need to also set KeyPEM.",
					},
					"key_file": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "KeyFile is the optional path to the private key for Consul communication. If this is set then you need to also set CertFile.",
					},
					"key_pem": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "KeyPEM is the optional PEM-encoded private key for Consul communication. If this is set then you need to also set CertPEM.",
					},
					"insecure_skip_verify": schema.BoolAttribute{
						Optional:            true,
						MarkdownDescription: "InsecureSkipVerify if set to true will disable TLS host verification.",
					},
				},
			},
		},
		Blocks: map[string]schema.Block{},
	}
}
